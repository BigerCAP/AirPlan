<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on TiDB AirPlan - A biger solution</title>
    <link>https://ap.tidb.cc/post/</link>
    <description>Recent content in Posts on TiDB AirPlan - A biger solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>TiDB - AirPlan</copyright>
    <lastBuildDate>Wed, 08 Jan 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://ap.tidb.cc/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TiDB &amp; Haproxy / show processlist View real IP</title>
      <link>https://ap.tidb.cc/post/20200108-tidb-haproxy-real-ip/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20200108-tidb-haproxy-real-ip/</guid>
      <description>0x00 - 背景 高可用性（英语：high availability，缩写为 HA）测试 failpoint 场景，需要在服务前面添加 load balance 组件；比如 F5、LVS、Haprox</description>
    </item>
    
    <item>
      <title>总结 - Syncer 助力思维成长</title>
      <link>https://ap.tidb.cc/post/20180605-syncer-mindmap/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20180605-syncer-mindmap/</guid>
      <description>0x00 背景 长期使用 Syncer 之后经过一番胡思乱想之后的总结经验，类似于“久病成医”的感觉 内容按照 201706 - 201806 期间使用经验整理，后续大致是不会遇见了，因为有了新</description>
    </item>
    
    <item>
      <title>TiKV 磁盘空间回收步骤记录</title>
      <link>https://ap.tidb.cc/post/20180503-disk-space-recovery/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20180503-disk-space-recovery/</guid>
      <description>0x00 前景介绍 该版本文档内容适用于 TiKV 3.0 之前版本；不包含使用 TiKV Titan engine 架构的内容 TiKV 节点磁盘占用主要为以下三个目录 {{deploy_dir}}/log TiKV 日志目录，目前日志 GC 需要单独脚本操</description>
    </item>
    
    <item>
      <title>测试域名代替 IP 部署 TiDB</title>
      <link>https://ap.tidb.cc/post/20180406-tidb-domain/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20180406-tidb-domain/</guid>
      <description>0x00 假设 新建机房网络频繁变更或公司内部要求禁止使用 IP 做为服务启动监听（大公司规划时喜欢使用 hostname/server name + domain 做为服务监听信息，配合公司内网 DNS 做跨地域运维</description>
    </item>
    
    <item>
      <title>测试在线修改 TiDB Cluster 组件 IP 地址</title>
      <link>https://ap.tidb.cc/post/20180327-change-tidb-ip/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20180327-change-tidb-ip/</guid>
      <description>0x00 背景 物理网络在实际生产环境会存在 vlan、IP 集群部署可能横跨多台机器甚至横跨机房，在有离线或在线业务情况下应该怎么操作变更 IP 地址信息，配</description>
    </item>
    
    <item>
      <title>Linux - Transfer.sh 一键文件服务器</title>
      <link>https://ap.tidb.cc/post/20170809-transfer.sh/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20170809-transfer.sh/</guid>
      <description>0x00 起源 平常需要各种传输日志文件，TiDB 部署进程比较多，打包后可能超过 100MB（微信最大支持 100MB 附件传输），发送人和接受人不是同平台时，文件</description>
    </item>
    
    <item>
      <title>负载均衡 - HAProxy &amp; TiDB 配合食用</title>
      <link>https://ap.tidb.cc/post/20170610-haproxy/</link>
      <pubDate>Sat, 10 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20170610-haproxy/</guid>
      <description>0x01 介绍 官网 百家饭内容，将测试环境的最终结果整理了下 0x02 功能 负载均衡：L4(TCP) 和 L7(HTTP/HTTPS) 两种模式，支持 RR(roundrobin) / 静态 RR / LC / IP Hash/ URI Hash/ URL_PARAM Hash/ HTTP_HEADER Hash 等丰富的负</description>
    </item>
    
    <item>
      <title>监控架构 - TIDB 监控运维 FAQ</title>
      <link>https://ap.tidb.cc/post/20170607-prometheus-faq/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20170607-prometheus-faq/</guid>
      <description>0x00 唠叨 遇见了、记下了，后面或许会遇见；经历过的事件只记下了标签、这里或许是个解答题 部分问题会因使用版本或场景解决方案不一，仅供参考 如有雷同 纯</description>
    </item>
    
    <item>
      <title>监控架构 - Blackbox_exporter 主动探测端口服务状态</title>
      <link>https://ap.tidb.cc/post/20170603-blackbox_exporter/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20170603-blackbox_exporter/</guid>
      <description>0x00 找个能监控组件端口是否存在的服务，并且可以将数据发送到 Prometheus ；blackbox export 是 Prometheus 家族一员，按照配置文件内容用于向目标主动探测 0x01 Deploy blackbox_exporter 是 Prometheus 官方</description>
    </item>
    
    <item>
      <title>监控架构 - Node_exporter 系统监控组件</title>
      <link>https://ap.tidb.cc/post/20170602-node_exporter/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20170602-node_exporter/</guid>
      <description>0x00 起源 学习 node export 存的 0x01 Collector 通过 http://IP:9100/metrics 查看当前主机监控信息 Node export 通过Collector代码块收集系统性能指标 以下内容引用 Prometeus/Node_export README 每个操作系统上的 Collectors 都有不同的</description>
    </item>
    
    <item>
      <title>TiDB 监控架构：Prometheus &#43; Grafana</title>
      <link>https://ap.tidb.cc/post/20170601-prometheus-grafana/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20170601-prometheus-grafana/</guid>
      <description>0x00 背影 通过本篇文档学习 TiDB 集群监控架构 (默认按照 TiDB-ansible 部署为准) 本篇文档按照 2019 年中 TiDB-ansible master branch 描述；区别在于是否有 pushgateway 组件 (端口 9091) 以下文档（百家饭+机器译</description>
    </item>
    
    <item>
      <title>Linux - Megacli 软件配置硬 RAID</title>
      <link>https://ap.tidb.cc/post/20090103-megacli/</link>
      <pubDate>Sat, 03 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20090103-megacli/</guid>
      <description>0x00 启示 服务器在远程机房托管，如果更改 raid level 需要通知机房运维人员下工单重做，时间周期不确定；听朋友介绍了该软件，通过软件对 LSI Raid 卡重新配置 Raid</description>
    </item>
    
    <item>
      <title>Linux - Tmux 多窗口敏捷工具</title>
      <link>https://ap.tidb.cc/post/20090102-tmux/</link>
      <pubDate>Fri, 02 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20090102-tmux/</guid>
      <description>0x00 起源 screen 热键激活用的 ctrl + a，该热键同时是跳转到行首的快捷键； 试图寻找第二款类似 screen 的工具；找到了 tmux 这种 linux 平台办公利器，尤其是在没有扩展屏情况下</description>
    </item>
    
    <item>
      <title>Linux - Screen 进程守护</title>
      <link>https://ap.tidb.cc/post/20090101-screen/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0800</pubDate>
      
      <guid>https://ap.tidb.cc/post/20090101-screen/</guid>
      <description>0x00 起源 百家饭内容：常用参数速查 主要用于 Linux 运行常驻命令守护，screen 创建窗口后运行程序，相比 nohub 命令使用上心安理得一些。 如果作为办公多窗口使</description>
    </item>
    
  </channel>
</rss>